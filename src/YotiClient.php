<?php

namespace Yoti;

use Psr\Http\Client\ClientInterface;
use Yoti\Entity\AmlProfile;
use Yoti\Exception\YotiClientException;
use Yoti\Http\Client;
use Yoti\Service\Aml\AmlResult;
use Yoti\Service\Aml\AmlService;
use Yoti\Service\Profile\ActivityDetails;
use Yoti\Service\Profile\ProfileService;
use Yoti\Service\ShareUrl\DynamicSharingService;
use Yoti\Service\ShareUrl\ShareUrlResult;
use Yoti\ShareUrl\DynamicScenario;
use Yoti\Util\Config;
use Yoti\Util\Constants;
use Yoti\Util\PemFile;
use Yoti\Util\Validation;

/**
 * Class YotiClient
 *
 * @package Yoti
 * @author Yoti SDK <websdk@yoti.com>
 */
class YotiClient
{
    /**
     * @var \Yoti\Util\PemFile
     */
    private $pemFile;

    /**
     * @var string
     */
    private $sdkId;

    /**
     * @var \Psr\Http\Client\ClientInterface
     */
    private $httpClient;

    /**
     * YotiClient constructor.
     *
     * @param string $sdkId
     *   The SDK identifier generated by Yoti Hub when you create your app.
     * @param \Yoti\Util\PemFile $pemFile
     *   PEM file path or string
     * @param \Psr\Http\Client\ClientInterface $httpClient (optional)
     *   Custom HTTP Client
     *
     * @throws \Yoti\Exception\RequestException
     * @throws \Yoti\Exception\YotiClientException
     */
    public function __construct(
        string $sdkId,
        PemFile $pemFile,
        ClientInterface $httpClient = null
    ) {
        $this->checkRequiredModules();

        Validation::notEmptyString($sdkId, 'SDK ID');
        $this->sdkId = $sdkId;
        $this->pemFile = $pemFile;
        $this->httpClient = $httpClient ?? new Client();
    }

    /**
     * Get login url.
     *
     * @param string $appId
     *
     * @return string
     */
    public static function getLoginUrl($appId): string
    {
        return Constants::CONNECT_BASE_URL . "/$appId";
    }

    /**
     * @return \Yoti\Service\Profile\ProfileService
     */
    private function getProfileService(): ProfileService
    {
        return new ProfileService(
            $this->sdkId,
            $this->pemFile,
            $this->httpClient
        );
    }

    /**
     * Return Yoti user profile.
     *
     * @param string $encryptedConnectToken
     *
     * @return \Yoti\Service\Profile\ActivityDetails
     *
     * @throws \Yoti\Exception\ActivityDetailsException
     * @throws \Yoti\Exception\ReceiptException
     */
    public function getActivityDetails($encryptedConnectToken): ActivityDetails
    {
        return $this->getProfileService()->getActivityDetails($encryptedConnectToken);
    }

    /**
     * @return \Yoti\Service\Aml\AmlService
     */
    private function getAmlService(): AmlService
    {
        return new AmlService(
            $this->sdkId,
            $this->pemFile,
            $this->httpClient
        );
    }

    /**
     * Perform AML profile check.
     *
     * @param \Yoti\Entity\AmlProfile $amlProfile
     *
     * @return \Yoti\Service\Aml\AmlResult
     *
     * @throws \Yoti\Exception\AmlException
     * @throws \Yoti\Exception\RequestException
     */
    public function performAmlCheck(AmlProfile $amlProfile): AmlResult
    {
        return $this->getAmlService()->performCheck($amlProfile);
    }

    /**
     * @return Yoti\Service\ShareUrl\DynamicSharingService
     */
    private function getDynamicSharingService(): DynamicSharingService
    {
        return new DynamicSharingService(
            $this->sdkId,
            $this->pemFile,
            $this->httpClient
        );
    }

    /**
     * Get Share URL for provided dynamic scenario.
     *
     * @param \Yoti\ShareUrl\DynamicScenario $dynamicScenario
     *
     * @return \Yoti\Service\ShareUrl\ShareUrlResult
     *
     * @throws \Yoti\Exception\ShareUrlException
     * @throws \Yoti\Exception\RequestException
     */
    public function createShareUrl(DynamicScenario $dynamicScenario): ShareUrlResult
    {
        return $this->getDynamicSharingService()->createShareUrl($dynamicScenario);
    }

    /**
     * Set Connect API URL.
     *
     * @param string $connectApiUrl
     *
     * @return \Yoti\YotiClient
     */
    public function setConnectApiUrl(string $connectApiUrl): YotiClient
    {
        Config::set(Constants::CONNECT_API_URL_KEY, $connectApiUrl);
        return $this;
    }

    /**
     * Set SDK identifier.
     *
     * Allows plugins to declare their identifier.
     *
     * @param string $sdkIdentifier
     *   SDK or Plugin identifier
     *
     * @return \Yoti\YotiClient
     */
    public function setSdkIdentifier(string $sdkIdentifier): YotiClient
    {
        Config::set(Constants::SDK_IDENTIFIER_KEY, $sdkIdentifier);
        return $this;
    }

    /**
     * Set SDK version.
     *
     * Allows plugins to declare their version.
     *
     * @param string $sdkVersion
     *   SDK or Plugin version
     *
     * @return \Yoti\YotiClient
     */
    public function setSdkVersion(string $sdkVersion): YotiClient
    {
        Config::set(Constants::SDK_VERSION_KEY, $sdkVersion);
        return $this;
    }

    /**
     * Check PHP required modules.
     *
     * @throws \Yoti\Exception\YotiClientException
     */
    private function checkRequiredModules()
    {
        $requiredModules = ['curl', 'json'];
        foreach ($requiredModules as $mod) {
            if (!extension_loaded($mod)) {
                throw new YotiClientException("PHP module '$mod' not installed", 501);
            }
        }
    }
}
