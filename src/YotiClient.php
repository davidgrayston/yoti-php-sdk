<?php

namespace Yoti;

use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\ResponseInterface;
use Yoti\Entity\AmlProfile;
use Yoti\Entity\AmlResult;
use Yoti\Entity\Receipt;
use Yoti\Exception\ActivityDetailsException;
use Yoti\Exception\AmlException;
use Yoti\Exception\ReceiptException;
use Yoti\Exception\ShareUrlException;
use Yoti\Exception\YotiClientException;
use Yoti\Http\Client;
use Yoti\Http\Payload;
use Yoti\Http\RequestBuilder;
use Yoti\ShareUrl\DynamicScenario;
use Yoti\ShareUrl\ShareUrlResult;
use Yoti\Util\Constants;
use Yoti\Util\Json;
use Yoti\Util\PemFile;
use Yoti\Util\Validation;

/**
 * Class YotiClient
 *
 * @package Yoti
 * @author Yoti SDK <websdk@yoti.com>
 */
class YotiClient
{
    /**
     * @var \Yoti\Util\PemFile
     */
    private $pemFile;

    /**
     * @var string
     */
    private $sdkId;

    /**
     * @var \Psr\Http\Client\ClientInterface
     */
    private $httpClient;

    private $connectApiUrl = Constants::CONNECT_API_URL;

    private $sdkVersion = Constants::SDK_VERSION;

    private $sdkIdentifier = Constants::SDK_IDENTIFIER;

    /** Request successful outcome */
    const OUTCOME_SUCCESS = 'SUCCESS';

    /** Auth HTTP header key */
    const YOTI_AUTH_HEADER_KEY = 'X-Yoti-Auth-Key';

    /**
     * YotiClient constructor.
     *
     * @param string $sdkId
     *   The SDK identifier generated by Yoti Hub when you create your app.
     * @param \Yoti\Util\PemFile $pemFile
     *   PEM file path or string
     *
     * @throws \Yoti\Exception\RequestException
     * @throws \Yoti\Exception\YotiClientException
     */
    public function __construct(
        string $sdkId,
        PemFile $pemFile
    ) {
        $this->checkRequiredModules();

        Validation::notEmptyString($sdkId, 'SDK ID');
        $this->sdkId = $sdkId;
        $this->pemFile = $pemFile;
        $this->httpClient = new Client();
    }

    /**
     * Get login url.
     *
     * @param string $appId
     *
     * @return string
     */
    public static function getLoginUrl($appId): string
    {
        return Constants::CONNECT_BASE_URL . "/$appId";
    }

    private function getConnectRequestBuilder()
    {
        return (new RequestBuilder())
            ->withBaseUrl($this->connectApiUrl)
            ->withSdkIdentifier($this->sdkIdentifier)
            ->withSdkVersion($this->sdkVersion)
            ->withPemFile($this->pemFile)
            ->withClient($this->httpClient);
    }

    /**
     * @param \Yoti\ShareUrl\DynamicScenario $dynamicScenario
     *
     * @return \Yoti\ShareUrl\ShareUrlResult
     *
     * @throws \Yoti\Exception\ShareUrlException
     */
    public function createShareUrl(DynamicScenario $dynamicScenario): ShareUrlResult
    {
        $response = $this->getConnectRequestBuilder()
            ->withEndpoint(sprintf('/qrcodes/apps/%s', $this->sdkId))
            ->withQueryParam('appId', $this->sdkId)
            ->withPost()
            ->withPayload(Payload::fromJsonData($dynamicScenario))
            ->build()
            ->execute();

        $httpCode = $response->getStatusCode();
        if ($httpCode < 200 || $httpCode > 299) {
            throw new ShareUrlException("Server responded with {$httpCode}");
        }

        return new ShareUrlResult(Json::decode($response->getBody()));
    }

    public function setHttpClient(ClientInterface $httpClient): YotiClient
    {
        $this->httpClient = $httpClient;
        return $this;
    }


    /**
     * @param \Yoti\Entity\AmlProfile $amlProfile
     *
     * @return \Yoti\Entity\AmlResult
     *
     * @throws \Yoti\Exception\AmlException
     */
    public function performAmlCheck(AmlProfile $amlProfile): AmlResult
    {
        $response = $this->getConnectRequestBuilder()
            ->withEndpoint('/aml-check')
            ->withQueryParam('appId', $this->sdkId)
            ->withPost()
            ->withPayload(Payload::fromJsonData($amlProfile))
            ->build()
            ->execute();

        // Validate result
        $this->validateAmlResult($response);

        // Set and return result
        return new AmlResult(Json::decode($response->getBody()));
    }

    /**
     * Handle request result.
     *
     * @param array $responseArr
     * @param int $httpCode
     *
     * @throws \Yoti\Exception\AmlException
     */
    private function validateAmlResult(ResponseInterface $response): void
    {
        $httpCode = $response->getStatusCode();

        if ($httpCode >= 200 && $httpCode < 300) {
            // The request is successful - nothing to do
            return;
        }

        $responseArr = Json::decode($response->getBody());

        $errorMessage = $this->getAmlErrorMessage($responseArr);
        $errorCode = isset($responseArr['code']) ? $responseArr['code'] : 'Error';

        // Throw the error message that's included in the response
        if (!empty($errorMessage)) {
            throw new AmlException("$errorCode - {$errorMessage}");
        }

        // Throw a general error message
        throw new AmlException("{$errorCode} - Server responded with {$httpCode}");
    }

    /**
     * Get error message from the response array.
     *
     * @param array $result
     *
     * @return string
     */
    private function getAmlErrorMessage(array $result): string
    {
        $errorMessage = '';
        if (isset($result['errors'][0]['property']) && isset($result['errors'][0]['message'])) {
            $errorMessage = $result['errors'][0]['property'] . ': ' . $result['errors'][0]['message'];
        }
        return $errorMessage;
    }

    /**
     * Return Yoti user profile.
     *
     * @param string $encryptedConnectToken
     *
     * @return \Yoti\ActivityDetails
     *
     * @throws \Yoti\Exception\ActivityDetailsException
     * @throws \Yoti\Exception\ReceiptException
     */
    public function getActivityDetails($encryptedConnectToken): ActivityDetails
    {
        $receipt = $this->getReceipt($encryptedConnectToken);

        // Check response was successful
        if ($receipt->getSharingOutcome() !== self::OUTCOME_SUCCESS) {
            throw new ActivityDetailsException('Outcome was unsuccessful');
        }

        return new ActivityDetails($receipt, $this->pemFile);
    }

    /**
     * Decrypt and return receipt data.
     *
     * @param string $encryptedConnectToken
     *
     * @return \Yoti\Entity\Receipt
     *
     * @throws \Yoti\Exception\ActivityDetailsException
     * @throws \Yoti\Exception\ReceiptException
     * @throws \Yoti\Exception\RequestException
     */
    private function getReceipt($encryptedConnectToken)
    {
        // Decrypt connect token
        $token = $this->decryptConnectToken($encryptedConnectToken);
        if (!$token) {
            throw new ActivityDetailsException('Could not decrypt connect token.');
        }

        // Request endpoint
        $response = $this->getConnectRequestBuilder()
            ->withEndpoint(sprintf('/profile/%s', $token))
            ->withQueryParam('appId', $this->sdkId)
            ->withHeader(self::YOTI_AUTH_HEADER_KEY, $this->pemFile->getAuthKey())
            ->withGet()
            ->build()
            ->execute();

        $httpCode = $response->getStatusCode();
        if ($httpCode < 200 || $httpCode > 299) {
            throw new ActivityDetailsException("Server responded with {$httpCode}");
        }

        $result = Json::decode($response->getBody());

        $this->checkForReceipt($result);

        return new Receipt($result['receipt']);
    }

    /**
     * Decrypt connect token.
     *
     * @param string $encryptedConnectToken
     *
     * @return mixed
     */
    private function decryptConnectToken($encryptedConnectToken)
    {
        $tok = base64_decode(strtr($encryptedConnectToken, '-_,', '+/='));
        openssl_private_decrypt($tok, $token, (string) $this->pemFile);

        return $token;
    }

    /**
     * @param array $response
     *
     * @throws \Yoti\Exception\ReceiptException
     */
    private function checkForReceipt(array $responseArr)
    {
        // Check receipt is in response
        if (!array_key_exists('receipt', $responseArr)) {
            throw new ReceiptException('Receipt not found in response');
        }
    }

    /**
     * Set Connect API URL.
     *
     * @param string $connectApiUrl
     *
     * @return \Yoti\YotiClient
     */
    public function setConnectApiUrl(string $connectApiUrl): YotiClient
    {
        $this->connectApiUrl = $connectApiUrl;
        return $this;
    }

    /**
     * Set SDK identifier.
     *
     * Allows plugins to declare their identifier.
     *
     * @param string $sdkIdentifier
     *   SDK or Plugin identifier
     *
     * @return \Yoti\YotiClient
     */
    public function setSdkIdentifier(string $sdkIdentifier): YotiClient
    {
        $this->sdkIdentifier = $sdkIdentifier;
        return $this;
    }

    /**
     * Set SDK version.
     *
     * Allows plugins to declare their version.
     *
     * @param string $sdkVersion
     *   SDK or Plugin version
     *
     * @return \Yoti\YotiClient
     */
    public function setSdkVersion(string $sdkVersion): YotiClient
    {
        $this->sdkVersion = $sdkVersion;
        return $this;
    }

    /**
     * Check PHP required modules.
     *
     * @throws \Yoti\Exception\YotiClientException
     */
    private function checkRequiredModules()
    {
        $requiredModules = ['curl', 'json'];
        foreach ($requiredModules as $mod) {
            if (!extension_loaded($mod)) {
                throw new YotiClientException("PHP module '$mod' not installed", 501);
            }
        }
    }
}
